//
// Base styles
//

.alert {
  position: relative;
  padding: $alert-padding-y $alert-padding-x;
  margin-bottom: $alert-margin-bottom;
  border: $alert-border-width solid transparent;
  @include border-radius($alert-border-radius);
}

// Headings for larger alerts
.alert-heading {
  // Specified to prevent conflicts of changing $headings-color
  color: inherit;
}

// Provide class for links that match alerts
.alert-link {
  font-weight: $alert-link-font-weight;
}


// Dismissible alerts
//
// Expand the right padding and account for the close button's positioning.

.alert-dismissible {
  padding-right: $alert-dismissible-padding-r;

  // Adjust close link position
  .btn-close {
    position: absolute;
    top: 0;
    right: 0;
    padding: $alert-dismissible-close-padding;
  }
}


// scss-docs-start alert-modifiers
// Generate contextual modifier classes for colorizing the alert.
@if $alert-variants-custom-properties {
  // With CSS Custom Properties
  .alert {
    @include alert-variant(
      var(--bs-alert-bg-color, transparent),
      var(--bs-alert-border-color, transparent),
      var(--bs-alert-color),
      var(--bs-alert-link-color),
    );
  }
  @each $color, $value in $alert-variants {
    @if type-of($value) == "map" {
      .alert-#{$color} {
        --bs-alert-bg-color: #{map-get($value, bg-color)};
        --bs-alert-border-color: #{map-get($value, border-color)};
        --bs-alert-color: #{map-get($value, color)};
        --bs-alert-link-color: #{map-get($value, link-color)};
      }
    }
  }
} @else {
  // Without CSS Custom Properties - only specific values
  @each $color, $value in $alert-variants {
    @if type-of($value) == "map" {
      // Generate variants without custom properties
      .alert-#{$color} {
        @include alert-variant(
          map-get($value, bg-color),
          map-get($value, border-color),
          map-get($value, color),
          map-get($value, link-color),
        );
      }
    }
  }
}
// scss-docs-end alert-modifiers
