// stylelint-disable property-blacklist, scss/dollar-variable-default
// SCSS RFS mixin
//
// Automated responsive values for font sizes, paddings, margins and much more
//
// Configuration
// Base value
@if $rfs-unit != rem and $rfs-unit != px {
  @error "`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.";
}
// Breakpoint at where values start decreasing if screen width is smaller
@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {
  @error "`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.";
}
// Resize values based on screen height and width
// Factor of decrease
@if type-of($rfs-factor) != number or $rfs-factor <= 1 {
  @error "`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.";
}
// 1 rem = $rfs-rem-value px
// Disable RFS by setting $enable-rfs to false
// Cache $rfs-base-value unit
// Remove px-unit from $rfs-base-value for calculations
@if $rfs-base-value-unit == px {
}
@else if $rfs-base-value-unit == rem {
}
// Cache $rfs-breakpoint unit to prevent multiple calls
// Remove unit from $rfs-breakpoint for calculations
@if $rfs-breakpoint-unit-cache == px {
}
@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == "em" {
}
// Calculate the media query value
// Internal mixin used to determine which media query needs to be used
@mixin _rfs-media-query {
  @if $rfs-two-dimensional {
    @if $rfs-mode == max-media-query {
        @content;
      }
    }
    @else {
        @content;
      }
    }
  }
  @else {
      @content;
    }
  }
}
// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-rule {
  @if $rfs-class == disable and $rfs-mode == max-media-query {
    // Adding an extra class increases specificity, which prevents the media query to override the property
    &,
    .disable-rfs &,
    &.disable-rfs {
      @content;
    }
  }
  @else if $rfs-class == enable and $rfs-mode == min-media-query {
    .enable-rfs &,
    &.enable-rfs {
      @content;
    }
  }
  @else {
    @content;
  }
}
// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-media-query-rule {
  @if $rfs-class == enable {
    @if $rfs-mode == min-media-query {
      @content;
    }
    @include _rfs-media-query {
      .enable-rfs &,
      &.enable-rfs {
        @content;
      }
    }
  }
  @else {
    @if $rfs-class == disable and $rfs-mode == min-media-query {
      .disable-rfs &,
      &.disable-rfs {
        @content;
      }
    }
    @include _rfs-media-query {
      @content;
    }
  }
}
// Helper function to get the formatted non-responsive value
@function rfs-value($values) {
  // Convert to list
  // Loop over each value and calculate value
  @each $value in $values {
    @if $value == 0 {
    }
    @else {
      // Cache $value unit
      @if $unit == px {
        // Convert to rem if needed
      }
      @else if $unit == rem {
        // Convert to px if needed
      }
      @else {
        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
      }
    }
  }
  // Remove first space
  @return unquote(str-slice($val, 2));
}
// Helper function to get the responsive value calculated by RFS
@function rfs-fluid-value($values) {
  // Convert to list
  // Loop over each value and calculate value
  @each $value in $values {
    @if $value == 0 {
    }
    @else {
      // Cache $value unit
      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
      @if not $unit or $unit != px and $unit != rem {
      }
      @else {
        // Remove unit from $value for calculations
        // Only add the media query if the value is greater than the minimum value
        @if abs($value) <= $rfs-base-value or not $enable-rfs {
        }
        @else {
          // Calculate the minimum value
          // Calculate difference between $value and the minimum value
          // Base value formatting
          // Use negative value if needed
          // Use `vmin` if two-dimensional is enabled
          // Calculate the variable width between 0 and $rfs-breakpoint
          // Return the calculated value
        }
      }
    }
  }
  // Remove first space
  @return unquote(str-slice($val, 2));
}
// RFS mixin
  @if $values != null {
    // Do not print the media query if responsive & non-responsive values are the same
    @if $val == $fluidVal {
    }
    @else {
      @include _rfs-rule {
        // Include safari iframe resize fix if needed
      }
      @include _rfs-media-query-rule {
      }
    }
  }
}
// Shorthand helper mixins
@mixin font-size($value) {
  @include rfs($value);
}
@mixin padding($value) {
  @include rfs($value, padding);
}
@mixin padding-top($value) {
  @include rfs($value, padding-top);
}
@mixin padding-left($value) {
  @include rfs($value, padding-left);
}
@mixin padding-bottom($value) {
  @include rfs($value, padding-bottom);
}
@mixin padding-right($value) {
  @include rfs($value, padding-right);
}
@mixin margin($value) {
  @include rfs($value, margin);
}
@mixin margin-top($value) {
  @include rfs($value, margin-top);
}
@mixin margin-left($value) {
  @include rfs($value, margin-left);
}
@mixin margin-bottom($value) {
  @include rfs($value, margin-bottom);
}
@mixin margin-right($value) {
  @include rfs($value, margin-right);
}
