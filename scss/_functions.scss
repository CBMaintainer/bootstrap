// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.
$named-colors: (
  "aliceblue": #f0f8ff,
  "antiquewhite": #faebd7,
  "aqua": #0ff,
  "aquamarine": #7fffd4,
  "azure": #f0ffff,
  "beige": #f5f5dc,
  "bisque": #ffe4c4,
  "black": #000,
  "blanchedalmond": #ffebcd,
  "blue": #00f,
  "blueviolet": #8a2be2,
  "brown": #a52a2a,
  "burlywood": #deb887,
  "cadetblue": #5f9ea0,
  "chartreuse": #7fff00,
  "chocolate": #d2691e,
  "coral": #ff7f50,
  "cornflowerblue": #6495ed,
  "cornsilk": #fff8dc,
  "crimson": #dc143c,
  "cyan": #0ff,
  "darkblue": #00008b,
  "darkcyan": #008b8b,
  "darkgoldenrod": #b8860b,
  "darkgray": #a9a9a9,
  "darkgreen": #006400,
  "darkgrey": #a9a9a9,
  "darkkhaki": #bdb76b,
  "darkmagenta": #8b008b,
  "darkolivegreen": #556b2f,
  "darkorange": #ff8c00,
  "darkorchid": #9932cc,
  "darkred": #8b0000,
  "darksalmon": #e9967a,
  "darkseagreen": #8fbc8f,
  "darkslateblue": #483d8b,
  "darkslategray": #2f4f4f,
  "darkturquoise": #00ced1,
  "darkviolet": #9400d3,
  "deeppink": #ff1493,
  "deepskyblue": #00bfff,
  "dimgray": #696969,
  "dodgerblue": #1e90ff,
  "firebrick": #b22222,
  "floralwhite": #fffaf0,
  "forestgreen": #228b22,
  "fuchsia": #f0f,
  "gainsboro": #dcdcdc,
  "ghostwhite": #f8f8ff,
  "gold": #ffd700,
  "goldenrod": #daa520,
  "gray": #808080,
  "green": #008000,
  "greenyellow": #adff2f,
  "grey": #808080,
  "honeydew": #f0fff0,
  "hotpink": #ff69b4,
  "indianred": #cd5c5c,
  "indigo": #4b0082,
  "ivory": #fffff0,
  "khaki": #f0e68c,
  "lavender": #e6e6fa,
  "lavenderblush": #fff0f5,
  "lawngreen": #7cfc00,
  "lemonchiffon": #fffacd,
  "lightblue": #add8e6,
  "lightcoral": #f08080,
  "lightcyan": #e0ffff,
  "lightgoldenrodyellow": #fafad2,
  "lightgray": #d3d3d3,
  "lightgreen": #90ee90,
  "lightgrey": #d3d3d3,
  "lightpink": #ffb6c1,
  "lightsalmon": #ffa07a,
  "lightseagreen": #20b2aa,
  "lightskyblue": #87cefa,
  "lightslategray": #789,
  "lightsteelblue": #b0c4de,
  "lightyellow": #ffffe0,
  "lime": #0f0,
  "limegreen": #32cd32,
  "linen": #faf0e6,
  "magenta": #f0f,
  "maroon": #800000,
  "mediumaquamarine": #66cdaa,
  "mediumblue": #0000cd,
  "mediumorchid": #ba55d3,
  "mediumpurple": #9370db,
  "mediumseagreen": #3cb371,
  "mediumslateblue": #7b68ee,
  "mediumspringgreen": #00fa9a,
  "mediumturquoise": #48d1cc,
  "mediumvioletred": #c71585,
  "midnightblue": #191970,
  "mintcream": #f5fffa,
  "mistyrose": #ffe4e1,
  "moccasin": #ffe4b5,
  "navajowhite": #ffdead,
  "navy": #000080,
  "oldlace": #fdf5e6,
  "olive": #808000,
  "olivedrab": #6b8e23,
  "orange": #ffa500,
  "orangered": #ff4500,
  "orchid": #da70d6,
  "palegoldenrod": #eee8aa,
  "palegreen": #98fb98,
  "paleturquoise": #afeeee,
  "palevioletred": #db7093,
  "papayawhip": #ffefd5,
  "peachpuff": #ffdab9,
  "peru": #cd853f,
  "pink": #ffc0cb,
  "plum": #dda0dd,
  "powderblue": #b0e0e6,
  "purple": #800080,
  "red": #f00,
  "rosybrown": #bc8f8f,
  "royalblue": #4169e1,
  "saddlebrown": #8b4513,
  "salmon": #fa8072,
  "sandybrown": #f4a460,
  "seagreen": #2e8b57,
  "seashell": #fff5ee,
  "sienna": #a0522d,
  "silver": #c0c0c0,
  "skyblue": #87ceeb,
  "slateblue": #6a5acd,
  "slategray": #708090,
  "snow": #fffafa,
  "springgreen": #00ff7f,
  "steelblue": #4682b4,
  "tan": #d2b48c,
  "teal": #008080,
  "thistle": #d8bfd8,
  "tomato": #ff6347,
  "turquoise": #40e0d0,
  "violet": #ee82ee,
  "wheat": #f5deb3,
  "white": #fff,
  "whitesmoke": #f5f5f5,
  "yellow": #ff0,
  "yellowgreen": #9acd32
) !default;

@function to-number($value, $base: 10) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error "Value for `to-number` should be a number or a string.";
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: ("0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == ".") {
      @if $character == "." {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * $base + map-get($numbers, $character);
      } @else {
        $digits: $digits * $base;
        $result: $result + divide(map-get($numbers, $character), $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}

@function red($value) {
  $str-value: "#{$value}";
  @if str-slice($str-value, 1, 1) == "#" and str-length($str-value) == 4 {
    $value-number: to-number(str-slice($str-value, 2, 2), 16);
    // @debug $value "red-hex:" $value-number * 16 + $value-number;
    @return $value-number * 16 + $value-number;
  }
  @if str-slice($str-value, 1, 1) == "#" {
    $return-value: to-number(str-slice($str-value, 2, 3), 16);
    // @debug $value "red-hex6:" if(str-length($str-value) == 9, $return-value * to-number(str-slice($str-value, 8, 9), 16) / 255, $return-value);
    @return if(str-length($str-value) == 9, round($return-value * to-number(str-slice($str-value, 8, 9), 16) / 255), $return-value);
  }
  @if str-slice($str-value, 1, 4) == "rgba" {
    $rgba-values: str-slice($str-value, str-index($str-value, "("));
    $red-value: to-number(str-slice($rgba-values, 2, str-index($rgba-values, ",") - 1));
    @while str-index($rgba-values, ",") != null {
      $rgba-values: str-slice($rgba-values, str-index($rgba-values, ",") + 1);
    }
    $alpha-value: to-number(str-slice($rgba-values, 1, -2));
    $return-value: round($red-value * $alpha-value);
    // @debug $value "red-rgba:" $return-value;
    @return $return-value;
  }
  @if str-slice($str-value, 1, 3) == "rgb" {
    $rgb-values: str-slice($str-value, str-index($str-value, "("));
    $return-value: round(to-number(str-slice($rgb-values, 2, str-index($rgb-values, ",") - 1)));
    // @debug $value "red-rgb:" $return-value;
    @return $return-value;
  }
  @if map-has-key($named-colors, $str-value) {
    @return red(map-get($named-colors, $str-value));
  }
  @error "#{$value} format isn't supported. Supported format: named colors, hex codes or rgb values.";
}

@function green($value) {
  $str-value: "#{$value}";
  @if str-slice($str-value, 1, 1) == "#" and str-length($str-value) == 4 {
    $value-number: to-number(str-slice($str-value, 3, 3), 16);
    // @debug $value "green-hex:" $value-number * 16 + $value-number;
    @return $value-number * 16 + $value-number;
  }
  @if str-slice($str-value, 1, 1) == "#" {
    $return-value: to-number(str-slice($str-value, 4, 5), 16);
    // @debug $value "green-hex6:" if(str-length($str-value) == 9, $return-value * to-number(str-slice($str-value, 8, 9), 16) / 255, $return-value);
    @return if(str-length($str-value) == 9, round($return-value * to-number(str-slice($str-value, 8, 9), 16) / 255), $return-value);
  }
  @if str-slice($str-value, 1, 4) == "rgba" {
    $rgba-values: str-slice($str-value, str-index($str-value, "("));
    $gba-values: str-slice($rgba-values, str-index($rgba-values, ",") + 1);
    $green-value: to-number(str-slice($gba-values, 1, str-index($gba-values, ",") - 1));
    @while str-index($rgba-values, ",") != null {
      $rgba-values: str-slice($rgba-values, str-index($rgba-values, ",") + 1);
    }
    $alpha-value: to-number(str-slice($rgba-values, 1, -2));
    $return-value: round($green-value * $alpha-value);
    // @debug $value "green-rgba:" $return-value;
    @return $return-value;
  }
  @if str-slice($str-value, 1, 3) == "rgb" {
    $rgb-values: str-slice($str-value, str-index($str-value, "("));
    $gb-values: str-slice($rgb-values, str-index($rgb-values, ",") + 1);
    $return-value: round(to-number(str-slice($gb-values, 1, str-index($gb-values, ",") - 1)));
    // @debug $value "green-rgb:" $return-value;
    @return $return-value;
  }
  @if map-has-key($named-colors, $str-value) {
    @return green(map-get($named-colors, $str-value));
  }
  @error "#{$value} format isn't supported. Supported format: named colors, hex codes or rgb values.";
}

@function blue($value) {
  $str-value: "#{$value}";
  @if str-slice($str-value, 1, 1) == "#" and str-length($str-value) == 4 {
    $value-number: to-number(str-slice($str-value, 4, 4), 16);
    // @debug $value "blue-hex:" $value-number * 16 + $value-number;
    @return $value-number * 16 + $value-number;
  }
  @if str-slice($str-value, 1, 1) == "#" {
    $return-value: to-number(str-slice($str-value, 6, 7), 16);
    // @debug $value "blue-hex6:" if(str-length($str-value) == 9, $return-value * to-number(str-slice($str-value, 8, 9), 16) / 255, $return-value);
    @return if(str-length($str-value) == 9, round($return-value * to-number(str-slice($str-value, 8, 9), 16) / 255), $return-value);
  }
  @if str-slice($str-value, 1, 4) == "rgba" {
    $rgba-values: str-slice($str-value, str-index($str-value, "("));
    $gba-values: str-slice($rgba-values, str-index($rgba-values, ",") + 1);
    $ba-values: str-slice($gba-values, str-index($gba-values, ",") + 1);
    $blue-value: to-number(str-slice($ba-values, 1, str-index($ba-values, ",")));
    @while str-index($rgba-values, ",") != null {
      $rgba-values: str-slice($rgba-values, str-index($rgba-values, ",") + 1);
    }
    $alpha-value: to-number(str-slice($rgba-values, 1, -2));
    $return-value: round($blue-value * $alpha-value);
    // @debug $value "blue-rgba:" $return-value;
    @return $return-value;
  }
  @if str-slice($str-value, 1, 3) == "rgb" {
    $rgb-values: str-slice($str-value, str-index($str-value, "("));
    $gb-values: str-slice($rgb-values, str-index($rgb-values, ",") + 1);
    $b-values: str-slice($gb-values, str-index($gb-values, ",") + 1);
    $return-value: round(to-number(str-slice($b-values, 2, str-index($b-values, ")") - 1)));
    // @debug $value "blue-rgb:" $return-value;
    @return to-number($return-value);
  }
  @if map-has-key($named-colors, $str-value) {
    @return blue(map-get($named-colors, $str-value));
  }
  @error "#{$value} format isn't supported. Supported format: named colors, hex codes or rgb values.";
}

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  @if length($map) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// Colors
@function to-rgb($value) {
  @return red($value), green($value), blue($value);
}

// stylelint-disable scss/dollar-variable-pattern
@function rgba-css-var($identifier, $target) {
  @if $identifier == "body" and $target == "bg" {
    @return rgba(var(--#{$prefix}#{$identifier}-bg-rgb), var(--#{$prefix}#{$target}-opacity));
  } @if $identifier == "body" and $target == "text" {
    @return rgba(var(--#{$prefix}#{$identifier}-color-rgb), var(--#{$prefix}#{$target}-opacity));
  } @else {
    @return rgba(var(--#{$prefix}#{$identifier}-rgb), var(--#{$prefix}#{$target}-opacity));
  }
}

@function map-loop($map, $func, $args...) {
  $_map: ();

  @each $key, $value in $map {
    // allow to pass the $key and $value of the map as an function argument
    $_args: ();
    @each $arg in $args {
      $_args: append($_args, if($arg == "$key", $key, if($arg == "$value", $value, $arg)));
    }

    $_map: map-merge($_map, ($key: call(get-function($func), $_args...)));
  }

  @return $_map;
}
// stylelint-enable scss/dollar-variable-pattern

@function varify($list) {
  $result: null;
  @each $entry in $list {
    $result: append($result, var(--#{$prefix}#{$entry}), space);
  }
  @return $result;
}

// Internal Bootstrap function to turn maps into its negative variant.
// It prefixes the keys with `n` and makes the value negative.
@function negativify-map($map) {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map-merge($result, ("n" + $key: (-$value)));
    }
  }
  @return $result;
}

// Get multiple keys from a sass map
@function map-get-multiple($map, $values) {
  $result: ();
  @each $key, $value in $map {
    @if (index($values, $key) != null) {
      $result: map-merge($result, ($key: $value));
    }
  }
  @return $result;
}

// Merge multiple maps
@function map-merge-multiple($maps...) {
  $merged-maps: ();

  @each $map in $maps {
    $merged-maps: map-merge($merged-maps, $map);
  }
  @return $merged-maps;
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Kitty Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, "url(") == 1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Color contrast
// See https://github.com/twbs/bootstrap/pull/30168

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light, $min-contrast-ratio: $min-contrast-ratio) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if $contrast-ratio > $min-contrast-ratio {
      @return $color;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + .05, $l2 + .05), divide($l2 + .05, $l1 + .05));
}

// Return WCAG2.2 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
@function luminance($color) {
  $rgb: (
    "r": red($color),
    "g": green($color),
    "b": blue($color)
  );

  @each $name, $value in $rgb {
    $value: if(divide($value, 255) < .04045, divide(divide($value, 255), 12.92), nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return (map-get($rgb, "r") * .2126) + (map-get($rgb, "g") * .7152) + (map-get($rgb, "b") * .0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100%);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color($color, $weight) {
  @return mix($white, $color, $weight);
}

// Shade a color: mix a color with black
@function shade-color($color, $weight) {
  @return mix($black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}
// scss-docs-end color-functions

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
  @if $value1 == null {
    @return $value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 + $value2;
  }

  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @if type-of($value2) != number {
    $value2: unquote("(") + $value2 + unquote(")");
  }

  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);
  $divisor-unit: unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}
