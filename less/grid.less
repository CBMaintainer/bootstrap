//
// Grid system
// --------------------------------------------------


// Set the container width, and override it for fixed navbars in media queries
.container {
  .container-fixed();
}

// mobile first defaults
.row {
  .make-row();
}

#grid {
  .cols-common() {
    // Common styles for all sizes of grid columns, widths 1-12
    .col(@index) when (@index = 1) { // initial
      @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
      .col(@index + 1, @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
      @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
      .col(@index + 1, ~"@{list}, @{item}");
    }
    .col(@index, @list) when (@index > @grid-columns) { // terminal
      @{list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left:  (@grid-gutter-width / 2);
        padding-right: (@grid-gutter-width / 2);
      }
    }

    .col(1); // kickstart it
  }

  .cols-float-left(@breakpoint-code) {
    .col(@index) when (@index = 1) { // initial
      @item: ~".col-@{breakpoint-code}-@{index}";
      .col(@index + 1, @item);
    }
    .col(@index, @list) when (@index < @grid-columns) { // general
      @item: ~".col-@{breakpoint-code}-@{index}";
      .col(@index + 1, ~"@{list}, @{item}");
    }
    // Note that `.col-*-12` doesn't get floated on purpose--there's no need
    // since it's full-width.
    .col(@index, @list) when (@index = @grid-columns) { // terminal
      @{list} {
        float: left;
      }
    }

    .col(1); // kickstart it
  }

  // Actual columns themselves
  .cols(@breakpoint-code) {
    .col(@index) when (@index < @grid-columns) { // initial & general
      .col-@{breakpoint-code}-@{index} { width: percentage((@index / @grid-columns)); }

      .col(@index + 1);
    }
    .col(@index) when (@index = @grid-columns) { // terminal
      .col-@{breakpoint-code}-@{index} { width: 100%; }
    }

    .col(1); // kickstart it
  }

  // Push columns for source order changes
  .cols-push(@breakpoint-code) {
    .col(@index) when (@index = 0) { // initial
      .col-@{breakpoint-code}-push-@{index} {
        left: auto;
      }

      .col(@index + 1);
    }
    .col(@index) when (0 < @index) and (@index < @grid-columns) { // general
      .col-@{breakpoint-code}-push-@{index} {
        left: percentage((@index / @grid-columns));
      }

      .col(@index + 1);
    }
    .col(@index) when (@index = @grid-columns) { // terminal
      // terminate
    }

    .col(0); // kickstart it
  }

  // Pull columns for source order changes
  // Exact same mixin as .cols-push, except change "left" -> "right" and "push" -> "pull"
  .cols-pull(@breakpoint-code) {
    .col(@index) when (@index = 0) { // initial
      .col-@{breakpoint-code}-pull-@{index} {
        right: auto;
      }

      .col(@index + 1);
    }
    .col(@index) when (0 < @index) and (@index < @grid-columns) { // general
      .col-@{breakpoint-code}-pull-@{index} {
        right: percentage((@index / @grid-columns));
      }

      .col(@index + 1);
    }
    .col(@index) when (@index = @grid-columns) { // terminal
      // terminate
    }

    .col(0); // kickstart it
  }

  // Offsets
  // Exact same mixin as .cols-push, except change "left" -> "margin-left" and "push" -> "offset"
  .cols-offset(@breakpoint-code) {
    .col(@index) when (@index = 0) { // initial
      .col-@{breakpoint-code}-offset-@{index} {
        margin-left: 0;
      }

      .col(@index + 1);
    }
    .col(@index) when (0 < @index) and (@index < @grid-columns) { // general
      .col-@{breakpoint-code}-offset-@{index} {
        margin-left: percentage((@index / @grid-columns));
      }

      .col(@index + 1);
    }
    .col(@index) when (@index = @grid-columns) { // terminal
      // terminate
    }

    .col(0); // kickstart it
  }
}

#grid > .cols-common();


// Extra small grid
//
// Grid classes for extra small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.

#grid > .cols-float-left(~"xs");
#grid > .cols(~"xs");


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm) {
  .container {
    width: @container-sm;
  }

  #grid > .cols-float-left(~"sm");
  #grid > .cols(~"sm");
  #grid > .cols-push(~"sm");
  #grid > .cols-pull(~"sm");
  #grid > .cols-offset(~"sm");
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md) {
  .container {
    width: @container-md;
  }

  #grid > .cols-float-left(~"md");
  #grid > .cols(~"md");
  #grid > .cols-push(~"md");
  #grid > .cols-pull(~"md");
  #grid > .cols-offset(~"md");
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
  .container {
    width: @container-lg;
  }

  #grid > .cols-float-left(~"lg");
  #grid > .cols(~"lg");
  #grid > .cols-push(~"lg");
  #grid > .cols-pull(~"lg");
  #grid > .cols-offset(~"lg");
}
