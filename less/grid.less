//
// Grid system
// --------------------------------------------------
// Generalized looping mixins for ease of generating redundant properties

// Pull class
.calc-grid(@index, @class, @type) when (@type = pull) {
    .col-@{class}-pull-@{index}{ right: percentage(round((@index / @grid-columns),6)); }
}

// Push class
.calc-grid(@index, @class, @type) when (@type = push) {
     .col-@{class}-push-@{index}{ left: percentage(round((@index / @grid-columns),6)); }
}
// Offset class
.calc-grid(@index, @class, @type) when (@type = offset) {
    .col-@{class}-offset-@{index} { margin-left: percentage(round((@index / @grid-columns),6)); }
}
// Pull Width ( base level class)
.calc-grid(@index, @class, @type) when (@type = width) {
  .col-@{class}-@{index} { width: percentage(round((@index / @grid-columns),6)); }
}

// basic looping in LESS
.loop (@index, @class, @type) when (@index > 0) {
  .calc-grid( @index, @class, @type);
  // next iteration
  .loop(@index - 1,@class, @type);
}

// Set the container width, and override it for fixed navbars in media queries

.container {
  .container-fixed();
}

// Mobile-first defaults

.row {
  .make-row();
}

/* thinned out the CSS class name range to leverage more globbed style selections */
[class^="col-"], [class*=" col-"] {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
  float: left;
}

// Note that `.col-xs-12` doesn't get floated on purpose—there's no need since
// it's full-width.

.col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 { float: none;}

.loop(@grid-columns, xs, width);
.loop(@grid-columns - 1, xs, pull);
.loop(@grid-columns - 1, xs, push);
.loop(@grid-columns - 1, xs, offset);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
//
// Note that `.col-sm-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-sm) {
  .container {
    max-width: @container-tablet;
  }
  .loop(@grid-columns, sm, width);
  .loop(@grid-columns - 1, sm, pull);
  .loop(@grid-columns - 1, sm, push);
  .loop(@grid-columns - 1, sm, offset);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
//
// Note that `.col-md-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-md) {
  .container {
    max-width: @container-desktop;
  }
  .loop(@grid-columns, md, width);
  .loop(@grid-columns - 1, md, pull);
  .loop(@grid-columns - 1, md, push);
  .loop(@grid-columns - 1, md, offset);
}

// Large grid
// Columns, offsets, pushes, and pulls for the large desktop device range.
//
// Note that `.col-lg-12` doesn't get floated on purpose—there's no need since
// it's full-width.


@media (min-width: @screen-lg-desktop) {
  .container {
    max-width: @container-lg-desktop;
  }
  .loop(@grid-columns, lg, width);
  .loop(@grid-columns - 1, lg, pull);
  .loop(@grid-columns - 1, lg, push);
  .loop(@grid-columns - 1, lg, offset);
}

